/*
Sort 0s, 1s and 2s
Difficulty: MediumAccuracy: 50.58%Submissions: 755K+Points: 4Average Time: 10m
Given an array arr[] containing only 0s, 1s, and 2s. Sort the array in ascending order.

You need to solve this problem without utilizing the built-in sort function.

Examples:

Input: arr[] = [0, 1, 2, 0, 1, 2]
Output: [0, 0, 1, 1, 2, 2]
Explanation: 0s 1s and 2s are segregated into ascending order.
Input: arr[] = [0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]
Output: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2]
Explanation: 0s 1s and 2s are segregated into ascending order.

Follow up: Could you come up with a one-pass algorithm using only constant extra space?
Constraints:
1 <= arr.size() <= 106
0 <= arr[i] <= 2
*/
class Solution {
    // Function to sort an array of 0s, 1s, and 2s
    public void sort012(int[] arr) {
        int z=0;
        int o=0;
        int t=0;
        int n = arr.length;
        for(int i=0;i<n;i++){
            if(arr[i]==0) z++;
            else if(arr[i]==1) o++;
            else if(arr[i]==2) t++;
        }
        for(int i=0;i<n;i++){
            if(z-->0) arr[i]=0;
            else if(o-->0) arr[i]=1;
            else if(t-->0) arr[i]=2;
        }
    }
}
